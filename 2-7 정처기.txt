클래스
객체지향의 기본요소 중에서 유사한 객체를 묶어 하나의 공통된 특성을 표현하는 요소
객체지향 프로그램에서 데이터를 추상화하는 단위
객체지향 소프트웨어 공학에서 하나 이상의 유사한 객체들을 묶어서 하나의 공통된 특성을 표현한 것

캡슐화
정보 은폐(정보 은닉)이 되어 속성과 메소드가 외부에 영향을 받거나 주지 않도록 설계됨.

다형성
상속받은 여러 개의 하위 객체들이 다른 형태의 특성을 갖는 객체로 이용될 수 있는 성질
오버라이딩, 오버로딩
오버라이딩 : 상이한 클래스들이 동일한 메소드명을 이용하는 능력이 있어야함.
오버로딩 : 상이한 메소드들이 동일한 클래스명을 이용하는 능력

객체지향 분석의 순서
객체모델링  -> 동적 모델링 -> 기능 모델링
객체모델링 : 요구되는 객체를 찾아내고 객체의 속성, 연산을 식별하는 단계
동적모델링 : 객체 모형들의 행위,상태,조건을 파악하는 단계. keyword "상태"
기능모델링 : 입출력 결정, 자료 흐름도, 기능의 내용을 상세히 기술, 제약사항을 결정하고 최소화

럼바우
객체모형, 동적모형, 기능모형으로 분리하여 접근하는 방법 순서는 같음.
Booch : 미시적, 거시적.
Coad 와 Yourdon Method : "E-R다이어그램"

객체지향 설계의 원칙
SRP(Single Responsibility Principle) : 객체는 하나의 책임만 맡아 처리할 수 있게해야함
OCP(Open - Closed Principle) : 소프트웨어 개체는 확장에는 열고, 수정 시에는 닫혀있게 해야 함.
LSP(Liskov Substitution Principle) : 서브타입은 어디에서나 자신의 기반타입으로 교체할 수 있어야함
ISP(Interface Segregation Principle) : 한개의 일반적인 인터페이스보다 구체적이고 안전한 여러개의 인터페이스가 좋다.
DIP(Dependency Inversion Principle) : 추상화 클래스에 의존하게한다.

JAVA
private, default(no option), protected, public

정적분석도구
pmd, cppcheck, valgrind, checkstyle